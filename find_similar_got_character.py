# -*- coding: utf-8 -*-
"""Find_Similar_GOT_Character.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G3U8vh9iv44CfQS8p5F6oRNl7y_KXUOc
"""

import numpy as np
import pandas as pd

df = pd.read_json("/content/drive/MyDrive/script-bag-of-words.json/script-bag-of-words.json")

df.tail()

df.iloc[-1]['text']

# conveting above json data into 3 formats charcter name, dialogue, how many words speak
dialouge = {}
for index, row in df.iterrows():
    for item in row['text']:
        if item['name'] in dialouge:
            # append
            dialouge[item['name']] = dialouge[item['name']] + item['text']
        else:
            # create character
            dialouge[item['name']] = item['text'] + " "

"""**817 characters who speak some dialouge in series**"""

len(dialouge)

new_df = pd.DataFrame()
new_df['character'] = dialouge.keys()
new_df['words'] = dialouge.values()

new_df.iloc[:,0:].head()

# gives us column of character,words,word_count:
new_df['word_count'] = new_df['words'].apply(lambda x: len(x.split()))
new_df = new_df.sort_values('word_count', ascending=False)
new_df = new_df[['character', 'words', 'word_count']]
new_df.head()

new_df['word_count'] = new_df['words'].apply(lambda x: len(x.split()))

new_df=new_df.sort_values('word_count',ascending=False)

new_df=new_df.head(100)

new_df.shape

# we have taken top 100 characters from GOT
new_df.head()

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(stop_words='english')

embeddings = cv.fit_transform(new_df['words']).toarray()

"""**100 characters and 15335 unique words speak by them**"""

embeddings.shape

embeddings = embeddings.astype('float64')

# use TSNE algorithm to convert data from High Dimension to Lower Dimension:
from sklearn.manifold import TSNE

tsne = TSNE(n_components=2,verbose =1, random_state=123)
z=tsne.fit_transform(embeddings)

"""**TSNE algorithm is implemented**"""

z.shape

new_df['x'] = z.T[0]
new_df['y'] = z.T[1]

# new DataFrame: 2 columns are added at last to visualize 15335D to 2D
new_df

# visual of that 2D data:

import plotly.express as px
fig = px.scatter(new_df.head(25), x='x', y='y', color='character')
fig.show()

# Similar Character Prediction is complete.





